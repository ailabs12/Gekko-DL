"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
function timeout(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
describe('should autostart', () => {
    it('should allow autostart', () => __awaiter(this, void 0, void 0, function* () {
        const timer = new _1.Timer(true);
        yield timeout(1000);
        const ms = timer.milliseconds();
        expect(ms).toBeGreaterThan(1000);
        expect(ms).toBeLessThan(1009);
    }));
    it('should not autostart by default', () => __awaiter(this, void 0, void 0, function* () {
        const timer = new _1.Timer();
        yield timeout(1000);
        const ms = timer.milliseconds();
        console.log('ms', ms);
        expect(ms).toBeGreaterThan(0.0);
        expect(ms).toBeLessThan(0.1);
    }));
    it('should chain calls', () => __awaiter(this, void 0, void 0, function* () {
        const timer = new _1.Timer();
        timer.start();
        yield timeout(500);
        const ms = timer.end().milliseconds();
        expect(ms).toBeGreaterThan(500);
        expect(ms).toBeLessThan(509);
    }));
});
//# sourceMappingURL=tests.js.map